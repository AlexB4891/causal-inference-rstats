---
title: "Cálculo de la participación del beneficiario final"
format: revealjs
editor: visual
---

## Environment

Librerías:

```{r, echo=TRUE}

library(tidyverse)
library(gt)
library(scales)
library(readxl)
library(glue)
```

Environment:

```{r}

R.version[1:10]
```

## Estructura del APS

```{r}

raw_data <- read_excel("ejemplo_aps.xlsx")


raw_data %>% 
  rename_with(.fn = ~ str_replace(.x,"_"," ") %>% 
                str_to_sentence() %>% 
                str_replace("aps","accionario")) %>% 
  mutate(across(Porcentaje,percent),
         parent = `Accionista` %in% c("R1","R2","R3","R9","R13"),
         parent = factor(parent)) %>% 
  gt() %>% 
  gt::cols_hide(columns = "parent") %>% 
  tab_options(
    data_row.padding = px(1) 
  ) %>% 
  data_color(
    columns = `Nivel accionario`,
    colors = scales::col_numeric(
      palette = c("#3F96F5", "#6498D1", "#8BA3BD"),
      domain = c(1, 3)
    )
  ) %>% 
  tab_style(
     style = cell_fill(color = "#B496CB"),
     location = cells_body(
       columns = Accionista,
       rows = parent == "TRUE"
     )
   ) %>% 
  tab_header(
    title = md("**Ejemplo simulado a partir de los datos originales del APS**")
  ) %>% 
  cols_label(Informante = md("**Informante**"),
             Sociedad = md("**Nivel accionario**"),
             `Nivel accionario` = md("**Nivel accionario**") ,
             Accionista = md("**Accionista**"),
             Porcentaje = md("**Porcentaje**")) %>% 
  tab_footnote(footnote = "El color indica el nivel de participación, entre más intenso el color más directa es la propíedad de la participación",
               locations = cells_column_labels(columns = `Nivel accionario`)) %>% 
  tab_footnote(footnote = "El color purpura indica las sociedades padre de la propuedad indirecta",
               locations = cells_column_labels(columns = Accionista))


```

## Proceso de cálculo de la propiedad efectiva

::: incremental
1.  Identificación de las sociedades informadas que a la vez *se desglosan en un subsiguiente nivel de participación.*

2.  Asignación de la participación de las sociedades informadas hasta terminar la cadena de propiedad.

3.  Identificación de los beneficiarios finales

4.  Cálculo de la participación efectiva sobre la sociedad informante.
:::

## Para qué hacemos esto

::: incremental
-   La reforma del 2015 nos indica qué si la participación total de la empresa en paraísos fiscales supera el 50% la empresa deberá pagar 3% adicional de impuesto a la renta sobre la totalidad de la base imponible

-   La misma sanción aplica para la no presentación del APS

-   Si la empresa declara participación efectiva en paraísos fiscales menor al 50% o presenta el APS incompleto, la sanción se aplicará sobre el proporcional de la base imponible considerando en el primer caso la participación en paraísos fiscales y en el segundo el porcentaje no reportado en el APS
:::

# Función de cálculo de la participación efectiva

## Tablas auxiliares

```{r, echo=TRUE}

parents <- raw_data %>% 
  select(sociedad) %>% 
  unique()

parents_p <- raw_data %>% 
  select(sociedad,nivel_aps) %>% 
  unique()

beneficiarios <- raw_data %>% 
  select(sociedad) %>% 
  unique() %>% 
  mutate(beneficiario_final = 0)



```

## Identificación de los padres

```{r, echo=TRUE}
child_parent_soc <- raw_data %>% 
  select(sociedad,accionista,nivel_aps,porcentaje) %>% 
  right_join(parents,by = c("accionista" = "sociedad")) %>% 
  mutate(nivel_aps = nivel_aps + 1,
         nivel_aps = str_c("nivel_",nivel_aps)) %>%
  split(.$nivel_aps) %>% 
  imap(~{
    
    val <- str_remove(.y,"nivel_")
    
    .x %>% rename_with(.cols = porcentaje,~str_c(.x,
                                                  val, sep = "_"))
    
    })
```

## Creación de las cadenas de participación

```{r, echo=TRUE}
    
porcent_prelim <- child_parent_soc %>% 
      reduce(full_join,by = c("accionista" = "sociedad")) %>% 
      pivot_longer(cols = c(matches("accionista")),
                   names_to = "origen",
                   values_to = "accionista") %>% 
      select(-matches("nivel"),
             -origen) %>% 
      inner_join(parents_p,by = c("accionista" = "sociedad")) %>% 
      mutate(nivel_aps = nivel_aps)
```

## Re-escritura de los porcentajes

```{r, echo=TRUE}

argumentos <- porcent_prelim %>% 
  select(nivel_aps) %>% 
  unique() %>% 
  mutate(
    name = glue("porcentaje_{nivel_aps}"),
    exp = glue("if_else(nivel_aps < {nivel_aps},NA_real_,porcentaje_{nivel_aps})"))

expresiones <- set_names(x = rlang::parse_exprs(argumentos$exp),
                         nm = argumentos$name)


 percent_df <-  porcent_prelim %>% 
    mutate(!!!expresiones) %>% 
    rename(informante = sociedad,
           sociedad = accionista) 
 
```

## Volvemos a los datos originales

```{r, echo=TRUE}

data_procesada <- raw_data %>% 
  left_join(percent_df) %>% 
  left_join(beneficiarios,
            by = c("accionista" = "sociedad")) %>% 
  mutate(beneficiario_final = replace_na(beneficiario_final,1))
```

### Multiplicación a través de la cadena de propiedad

```{r , echo=TRUE}

data_procesada <- data_procesada %>% 
  rowwise() %>% 
  mutate(product = prod(across(.cols = matches("porcentaje")),
                        na.rm = T) ) 
```

## Comprobación

```{r , echo=TRUE}

data_procesada %>% 
  filter(beneficiario_final == 1) %>% 
  pull(product) %>% 
  sum()
```

La función se guarda en el archivo:

```{r, eval=FALSE,echo=TRUE}

source("scripts/analisis_aps/funcion_identificacion_beneficiario.R")

```
